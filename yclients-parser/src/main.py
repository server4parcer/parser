"""
Main - –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ YCLIENTS.
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ Docker –æ–∫—Ä—É–∂–µ–Ω–∏–∏ Timeweb.
"""
import asyncio
import logging
import sys
import os
import argparse
import uvicorn
from typing import List, Optional

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ Docker
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.insert(0, parent_dir)
sys.path.insert(0, current_dir)

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Å fallback
try:
    from config.logging_config import setup_logging
except ImportError:
    # Fallback –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    def setup_logging():
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )

try:
    from config.settings import (
        API_HOST, API_PORT, API_DEBUG, 
        DEFAULT_URLS, PARSE_INTERVAL
    )
except ImportError:
    # Fallback –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    API_HOST = os.environ.get("API_HOST", "0.0.0.0")
    API_PORT = int(os.environ.get("API_PORT", "8000"))
    API_DEBUG = os.environ.get("API_DEBUG", "false").lower() == "true"
    PARSE_INTERVAL = int(os.environ.get("PARSE_INTERVAL", "600"))
    
    # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    url_env = os.environ.get("PARSE_URLS", "")
    DEFAULT_URLS = [url.strip() for url in url_env.split(",") if url.strip()] if url_env else []

try:
    from src.database.db_manager import DatabaseManager
    from src.parser.yclients_parser import YClientsParser
    from src.api.routes import app
except ImportError:
    # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç –±–µ–∑ src prefix
    from database.db_manager import DatabaseManager
    from parser.yclients_parser import YClientsParser
    from api.routes import app

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = logging.getLogger(__name__)

async def run_api_server() -> None:
    """–ó–∞–ø—É—Å–∫ API-—Å–µ—Ä–≤–µ—Ä–∞."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ API-—Å–µ—Ä–≤–µ—Ä–∞")
    
    try:
        # API-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        config = uvicorn.Config(
            "src.api.routes:app" if "src" in sys.modules else "api.routes:app",
            host=API_HOST,
            port=API_PORT,
            log_level="info" if API_DEBUG else "warning",
            reload=False  # –û—Ç–∫–ª—é—á–∞–µ–º reload –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
        )
        server = uvicorn.Server(config)
        await server.serve()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞: {e}")

async def run_parser(urls: List[str], continuous: bool = True) -> None:
    """
    –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ YCLIENTS.
    """
    logger.info(f"üéØ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è {len(urls)} URL")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_manager = DatabaseManager()
    
    try:
        await db_manager.initialize()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞
        parser = YClientsParser(urls, db_manager)
        
        if continuous:
            logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {PARSE_INTERVAL}—Å)")
            await parser.run_continuous()
        else:
            logger.info("‚ö° –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞")
            await parser.run_single_iteration()
        
    except KeyboardInterrupt:
        logger.info("‚õî –ü–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")
        raise
    
    finally:
        try:
            await db_manager.close()
            logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ë–î: {e}")

async def run_all(urls: List[str]) -> None:
    """
    –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∏ API-—Å–µ—Ä–≤–µ—Ä–∞
    tasks = []
    
    # API –∑–∞–¥–∞—á–∞
    api_task = asyncio.create_task(run_api_server())
    tasks.append(api_task)
    logger.info("üì° API –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞")
    
    # –ü–∞—Ä—Å–µ—Ä –∑–∞–¥–∞—á–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å URL)
    if urls:
        parser_task = asyncio.create_task(run_parser(urls))
        tasks.append(parser_task)
        logger.info("üéØ –ü–∞—Ä—Å–µ—Ä –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞")
    else:
        logger.warning("‚ö†Ô∏è URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ API")
    
    # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
    try:
        await asyncio.gather(*tasks, return_exceptions=True)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–∞—Ö: {e}")

def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    parser = argparse.ArgumentParser(description="YClients Parser –¥–ª—è Timeweb")
    
    parser.add_argument(
        "--mode",
        choices=["parser", "api", "all"],
        default="all",
        help="–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã"
    )
    
    parser.add_argument(
        "--urls",
        nargs="+",
        help="URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞"
    )
    
    parser.add_argument(
        "--once",
        action="store_true",
        help="–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –æ–¥–∏–Ω —Ä–∞–∑"
    )
    
    parser.add_argument(
        "--interval",
        type=int,
        default=PARSE_INTERVAL,
        help=f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {PARSE_INTERVAL}—Å)"
    )
    
    return parser.parse_args()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logger.info("üéâ YClients Parser –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")
    logger.info(f"üê≥ –†–µ–∂–∏–º: Docker/Timeweb")
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    args = parse_arguments()
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    urls = args.urls if args.urls else DEFAULT_URLS
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    logger.info(f"‚öôÔ∏è API Host: {API_HOST}:{API_PORT}")
    logger.info(f"üîß Debug —Ä–µ–∂–∏–º: {API_DEBUG}")
    logger.info(f"üìã URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {len(urls)}")
    for i, url in enumerate(urls, 1):
        logger.info(f"  {i}. {url}")
    
    if not urls and args.mode in ["parser", "all"]:
        logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
        logger.info("üí° –î–æ–±–∞–≤—å—Ç–µ URL —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PARSE_URLS –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä --urls")
        return
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    global PARSE_INTERVAL
    PARSE_INTERVAL = args.interval
    
    # –ó–∞–ø—É—Å–∫ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
    try:
        if args.mode == "parser":
            await run_parser(urls, not args.once)
        elif args.mode == "api":
            await run_api_server()
        else:  # all
            await run_all(urls)
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
