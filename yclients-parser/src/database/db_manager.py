"""
Database Manager - –°—Ç–∞–±–∏–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase –≤ Docker –æ–∫—Ä—É–∂–µ–Ω–∏–∏.
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Timeweb –¥–µ–ø–ª–æ—è.
"""
import asyncio
import logging
import json
import os
from typing import Dict, List, Optional, Any, Tuple
from datetime import datetime

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç Supabase
try:
    from supabase import create_client, Client
    SUPABASE_AVAILABLE = True
except ImportError:
    SUPABASE_AVAILABLE = False

logger = logging.getLogger(__name__)

class DatabaseManager:
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase.
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        self.supabase: Optional[Client] = None
        self.is_initialized = False
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.supabase_url = os.environ.get("SUPABASE_URL", "")
        self.supabase_key = os.environ.get("SUPABASE_KEY", "")
        
        # –ù–∞–∑–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        self.booking_table = "booking_data"
        self.url_table = "urls"
    
    async def initialize(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase."""
        try:
            if not SUPABASE_AVAILABLE:
                raise Exception("Supabase SDK –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            if not self.supabase_url or not self.supabase_key:
                raise Exception("SUPABASE_URL –∏–ª–∏ SUPABASE_KEY –Ω–µ —É–∫–∞–∑–∞–Ω—ã")
            
            logger.info("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
            self.supabase = create_client(self.supabase_url, self.supabase_key)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            try:
                response = self.supabase.table(self.booking_table).select("id").limit(1).execute()
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {self.booking_table} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º...")
                await self.create_tables_if_not_exist()
            
            self.is_initialized = True
            logger.info("‚úÖ DatabaseManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DatabaseManager: {str(e)}")
            raise
    
    async def create_tables_if_not_exist(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
        try:
            logger.info("üî® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
            
            # SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã booking_data
            booking_table_sql = """
            CREATE TABLE IF NOT EXISTS booking_data (
                id SERIAL PRIMARY KEY,
                url_id INTEGER,
                date DATE,
                time TIME,
                price TEXT,
                provider TEXT,
                created_at TIMESTAMP DEFAULT NOW(),
                updated_at TIMESTAMP DEFAULT NOW()
            );
            """
            
            # SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã urls
            url_table_sql = """
            CREATE TABLE IF NOT EXISTS urls (
                id SERIAL PRIMARY KEY,
                url TEXT UNIQUE NOT NULL,
                status TEXT DEFAULT 'active',
                created_at TIMESTAMP DEFAULT NOW(),
                updated_at TIMESTAMP DEFAULT NOW()
            );
            """
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º SQL —á–µ—Ä–µ–∑ Supabase (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
            # –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ —Ç–∞–±–ª–∏—Ü—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã –≤—Ä—É—á–Ω—É—é
            logger.info("üìã –¢–∞–±–ª–∏—Ü—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã –≤ Supabase Dashboard")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {str(e)}")
    
    async def save_booking_data(self, url: str, data: List[Dict[str, Any]]) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π.
        """
        if not self.is_initialized:
            logger.error("‚ùå DatabaseManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        if not data:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return True
        
        try:
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è URL: {url}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º URL –∑–∞–ø–∏—Å—å
            url_id = await self.get_or_create_url(url)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            records_to_insert = []
            
            for item in data:
                # –û—á–∏—â–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                cleaned_item = self.clean_booking_data(item)
                cleaned_item['url_id'] = url_id
                
                # –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                logger.info(f"üìù –ó–∞–ø–∏—Å—å: –¥–∞—Ç–∞={cleaned_item.get('date')}, –≤—Ä–µ–º—è={cleaned_item.get('time')}, —Ü–µ–Ω–∞={cleaned_item.get('price')}, –ø—Ä–æ–≤–∞–π–¥–µ—Ä={cleaned_item.get('provider')}")
                
                records_to_insert.append(cleaned_item)
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–∞—Ç—á–∞–º–∏
            batch_size = 100
            total_inserted = 0
            
            for i in range(0, len(records_to_insert), batch_size):
                batch = records_to_insert[i:i + batch_size]
                
                try:
                    response = self.supabase.table(self.booking_table).insert(batch).execute()
                    
                    if response.data:
                        total_inserted += len(response.data)
                        logger.info(f"‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω –±–∞—Ç—á {i//batch_size + 1}: {len(response.data)} –∑–∞–ø–∏—Å–µ–π")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –±–∞—Ç—á–∞ {i//batch_size + 1}: {str(e)}")
                    
                    # –ü—Ä–æ–±—É–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ –æ–¥–Ω–æ–π
                    for record in batch:
                        try:
                            response = self.supabase.table(self.booking_table).insert(record).execute()
                            if response.data:
                                total_inserted += 1
                        except Exception as single_error:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏: {single_error}")
            
            logger.info(f"‚úÖ –í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {total_inserted} –∏–∑ {len(data)} –∑–∞–ø–∏—Å–µ–π")
            return total_inserted > 0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return False
    
    async def get_or_create_url(self, url: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ URL –∑–∞–ø–∏—Å–∏."""
        try:
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π URL
            response = self.supabase.table(self.url_table).select("id").eq("url", url).execute()
            
            if response.data:
                return response.data[0]['id']
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π URL
            response = self.supabase.table(self.url_table).insert({"url": url}).execute()
            
            if response.data:
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π URL: {url}")
                return response.data[0]['id']
            
            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ—à URL –∫–∞–∫ ID
            return hash(url) % 1000000
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å URL: {str(e)}")
            return hash(url) % 1000000
    
    def clean_booking_data(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û—á–∏—Å—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
        """
        cleaned = {}
        
        # –î–∞—Ç–∞
        date_value = data.get('date', '')
        if date_value:
            try:
                # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                if isinstance(date_value, str):
                    cleaned['date'] = date_value
                else:
                    cleaned['date'] = str(date_value)
            except:
                cleaned['date'] = None
        else:
            cleaned['date'] = None
        
        # –í—Ä–µ–º—è
        time_value = data.get('time', '')
        if time_value:
            try:
                if isinstance(time_value, str):
                    cleaned['time'] = time_value
                else:
                    cleaned['time'] = str(time_value)
            except:
                cleaned['time'] = None
        else:
            cleaned['time'] = None
        
        # –¶–µ–Ω–∞ - –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –≤—Ä–µ–º—è!
        price_value = data.get('price', '')
        if price_value:
            price_str = str(price_value).strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –≤—Ä–µ–º—è (—Ñ–æ—Ä–º–∞—Ç HH:MM –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ –≤—Ä–µ–º–µ–Ω–∏)
            if self.is_time_format(price_str):
                logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º—è –≤–º–µ—Å—Ç–æ —Ü–µ–Ω—ã: {price_str}")
                cleaned['price'] = "–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            else:
                cleaned['price'] = price_str
        else:
            cleaned['price'] = "–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        # –ü—Ä–æ–≤–∞–π–¥–µ—Ä
        provider_value = data.get('provider', '')
        if provider_value and str(provider_value).strip() and str(provider_value).strip() != "–ù–µ —É–∫–∞–∑–∞–Ω":
            cleaned['provider'] = str(provider_value).strip()
        else:
            cleaned['provider'] = "–ù–µ —É–∫–∞–∑–∞–Ω"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        cleaned['created_at'] = datetime.now().isoformat()
        
        return cleaned
    
    def is_time_format(self, value: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–µ–º (–£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)."""
        if not value:
            return False
        
        value = value.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ HH:MM
        if ':' in value:
            parts = value.split(':')
            if len(parts) == 2:
                try:
                    hour, minute = int(parts[0]), int(parts[1])
                    return 0 <= hour <= 23 and 0 <= minute <= 59
                except ValueError:
                    return False
        
        # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ —Å –≤–∞–ª—é—Ç–æ–π, –Ω–æ —á–∏—Å–ª–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —á–∞—Å—É
        # –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–π–º–∞—Ç—å —Å–ª—É—á–∞–∏ "22‚ÇΩ", "7‚ÇΩ" –∏ —Ç.–¥.
        import re
        currency_number_match = re.match(r'^(\d+)\s*[‚ÇΩ–†—Ä—É–±$‚Ç¨]', value, re.IGNORECASE)
        if currency_number_match:
            try:
                num = int(currency_number_match.group(1))
                if 0 <= num <= 23:
                    return True  # –í–µ—Ä–æ—è—Ç–Ω–æ —á–∞—Å —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –≤–∞–ª—é—Ç–æ–π
            except ValueError:
                pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 23 (—á–∞—Å)
        try:
            num = int(value.replace('‚ÇΩ', '').replace('–†', '').replace('—Ä—É–±', '').strip())
            return 0 <= num <= 23
        except ValueError:
            return False
    
    async def get_booking_data(self, limit: int = 100, offset: int = 0) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
        try:
            if not self.is_initialized:
                return []
            
            response = self.supabase.table(self.booking_table).select("*").range(offset, offset + limit - 1).execute()
            
            return response.data if response.data else []
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return []
    
    async def close(self) -> None:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."""
        try:
            if self.supabase:
                # Supabase HTTP –∫–ª–∏–µ–Ω—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —è–≤–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
                self.supabase = None
                self.is_initialized = False
                logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Supabase –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
