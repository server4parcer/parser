"""
Improved Data Extractor - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤.
"""
import asyncio
import logging
import re
from datetime import datetime, time, date
from typing import Dict, List, Optional, Any, Tuple, Union

from playwright.async_api import ElementHandle, Page
from src.parser.selectors import (
    SELECTORS, XPATH_SELECTORS, PATTERNS,
    is_time_not_price, is_price_not_time, is_valid_provider_name
)

logger = logging.getLogger(__name__)


class ImprovedDataExtractor:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∫–ª–∞—Å—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
    –û—Å–Ω–æ–≤–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
    - –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∫ —Ü–µ–Ω—ã
    - –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    - –ù–∞–¥–µ–∂–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö."""
        self.price_pattern = re.compile(PATTERNS["price"])
        self.price_number_pattern = re.compile(PATTERNS["price_number"])
        self.time_pattern = re.compile(PATTERNS["time"])
        self.name_pattern = re.compile(PATTERNS["name"])

    async def extract_text_content(self, element: ElementHandle) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞."""
        try:
            text = await element.text_content()
            return text.strip() if text else ""
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
            return ""

    async def extract_attribute(self, element: ElementHandle, attr: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞."""
        try:
            value = await element.get_attribute(attr)
            return value.strip() if value else ""
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—Ç—Ä–∏–±—É—Ç–∞ {attr}: {str(e)}")
            return ""

    async def extract_price_from_element_improved(self, element: ElementHandle) -> Optional[str]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã - –∏–∑–±–µ–≥–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∫ —Ü–µ–Ω—ã.
        """
        try:
            logger.debug("üîç –ü–æ–∏—Å–∫ —Ü–µ–Ω—ã –≤ —ç–ª–µ–º–µ–Ω—Ç–µ...")
            
            # 1. –ò—â–µ–º —Ü–µ–Ω—É –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–∞—Ö –¥–ª—è —Ü–µ–Ω—ã
            for price_selector in SELECTORS["slot_price"]:
                try:
                    price_elements = await element.query_selector_all(price_selector)
                    for price_element in price_elements:
                        price_text = await self.extract_text_content(price_element)
                        if price_text and is_price_not_time(price_text):
                            cleaned_price = self.clean_price_enhanced(price_text)
                            if cleaned_price:
                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –≤ {price_selector}: {cleaned_price}")
                                return cleaned_price
                except Exception:
                    continue
            
            # 2. –ò—â–µ–º –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
            price_attrs = ['data-price', 'data-cost', 'data-amount', 'price']
            for attr in price_attrs:
                price_value = await self.extract_attribute(element, attr)
                if price_value and is_price_not_time(price_value):
                    cleaned_price = self.clean_price_enhanced(price_value)
                    if cleaned_price:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –≤ –∞—Ç—Ä–∏–±—É—Ç–µ {attr}: {cleaned_price}")
                        return cleaned_price
            
            # 3. –ò—â–µ–º —á–µ—Ä–µ–∑ XPath
            try:
                for xpath in XPATH_SELECTORS["price_xpath"]:
                    price_texts = await element.evaluate(f"el => {{ const result = document.evaluate('{xpath}', el, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null); const texts = []; for(let i = 0; i < result.snapshotLength; i++) {{ texts.push(result.snapshotItem(i).textContent.trim()); }} return texts; }}")
                    for price_text in price_texts:
                        if price_text and is_price_not_time(price_text):
                            cleaned_price = self.clean_price_enhanced(price_text)
                            if cleaned_price:
                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ —á–µ—Ä–µ–∑ XPath: {cleaned_price}")
                                return cleaned_price
            except Exception as e:
                logger.debug(f"XPath –¥–ª—è —Ü–µ–Ω—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
            
            # 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞, –∏—Å–∫–ª—é—á–∞—è –≤—Ä–µ–º—è
            full_text = await self.extract_text_content(element)
            if full_text:
                # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
                text_parts = re.split(r'[\s\n\t]+', full_text)
                for part in text_parts:
                    if part and is_price_not_time(part):
                        cleaned_price = self.clean_price_enhanced(part)
                        if cleaned_price:
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ: {cleaned_price}")
                            return cleaned_price
            
            logger.debug("‚ùå –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {str(e)}")
            return None

    async def extract_provider_from_element_improved(self, element: ElementHandle) -> Optional[str]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏–º–µ–Ω.
        """
        try:
            logger.debug("üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ...")
            
            # 1. –ò—â–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–∞—Ö
            for provider_selector in SELECTORS["slot_provider"]:
                try:
                    provider_elements = await element.query_selector_all(provider_selector)
                    for provider_element in provider_elements:
                        provider_text = await self.extract_text_content(provider_element)
                        if provider_text and is_valid_provider_name(provider_text):
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤ {provider_selector}: {provider_text}")
                            return provider_text.strip()
                except Exception:
                    continue
            
            # 2. –ò—â–µ–º –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
            provider_attrs = ['data-staff-name', 'data-provider', 'data-specialist', 'staff-name']
            for attr in provider_attrs:
                provider_value = await self.extract_attribute(element, attr)
                if provider_value and is_valid_provider_name(provider_value):
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤ –∞—Ç—Ä–∏–±—É—Ç–µ {attr}: {provider_value}")
                    return provider_value.strip()
            
            # 3. –ò—â–µ–º —á–µ—Ä–µ–∑ XPath
            try:
                for xpath in XPATH_SELECTORS["provider_xpath"]:
                    provider_texts = await element.evaluate(f"el => {{ const result = document.evaluate('{xpath}', el, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null); const texts = []; for(let i = 0; i < result.snapshotLength; i++) {{ texts.push(result.snapshotItem(i).textContent.trim()); }} return texts; }}")
                    for provider_text in provider_texts:
                        if provider_text and is_valid_provider_name(provider_text):
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä —á–µ—Ä–µ–∑ XPath: {provider_text}")
                            return provider_text.strip()
            except Exception as e:
                logger.debug(f"XPath –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
            
            # 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
            full_text = await self.extract_text_content(element)
            if full_text:
                # –ò—â–µ–º –∏–º–µ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ
                words = re.findall(r'[–ê-–Ø–Å][–∞-—è—ë]+(?:\s+[–ê-–Ø–Å][–∞-—è—ë]+)*|[A-Z][a-z]+(?:\s+[A-Z][a-z]+)*', full_text)
                for word in words:
                    if is_valid_provider_name(word):
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤ —Ç–µ–∫—Å—Ç–µ: {word}")
                        return word.strip()
            
            logger.debug("‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return "–ù–µ —É–∫–∞–∑–∞–Ω"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {str(e)}")
            return "–ù–µ —É–∫–∞–∑–∞–Ω"

    async def extract_time_from_element(self, element: ElementHandle) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ HTML-—ç–ª–µ–º–µ–Ω—Ç–∞."""
        try:
            logger.debug("üîç –ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–∏ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ...")
            
            # 1. –ò—â–µ–º –≤—Ä–µ–º—è –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–∞—Ö
            time_selectors = ['.time', '.slot-time', '.booking-time', '[data-time]']
            for time_selector in time_selectors:
                try:
                    time_element = await element.query_selector(time_selector)
                    if time_element:
                        time_text = await self.extract_text_content(time_element)
                        if time_text and is_time_not_price(time_text):
                            parsed_time = self.parse_time(time_text)
                            if parsed_time:
                                return parsed_time.isoformat()
                except Exception:
                    continue
            
            # 2. –ò—â–µ–º –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
            time_attrs = ['data-time', 'time']
            for attr in time_attrs:
                time_str = await self.extract_attribute(element, attr)
                if time_str and is_time_not_price(time_str):
                    parsed_time = self.parse_time(time_str)
                    if parsed_time:
                        return parsed_time.isoformat()
            
            # 3. –ò—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ —ç–ª–µ–º–µ–Ω—Ç–∞
            full_text = await self.extract_text_content(element)
            if full_text:
                # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ç–µ–∫—Å—Ç–µ
                time_match = self.time_pattern.search(full_text)
                if time_match:
                    time_str = time_match.group(0)
                    if is_time_not_price(time_str):
                        parsed_time = self.parse_time(time_str)
                        if parsed_time:
                            return parsed_time.isoformat()
            
            return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {str(e)}")
            return None

    def clean_price_enhanced(self, price_str: str) -> str:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã."""
        if not price_str:
            return ""
        
        price_str = ' '.join(price_str.split())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –≤—Ä–µ–º—è
        if is_time_not_price(price_str):
            return ""
        
        # –ò—â–µ–º —Ü–µ–Ω—É —Å –≤–∞–ª—é—Ç–æ–π
        currency_match = self.price_pattern.search(price_str)
        if currency_match:
            price_value = currency_match.group(1).replace(',', '.')
            currency = currency_match.group(2)
            return self.format_price_with_currency(price_value, currency)
        
        # –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ü–µ–Ω—É
        if self.price_number_pattern.match(price_str.strip()):
            return f"{price_str.strip()} ‚ÇΩ"
        
        return ""

    def format_price_with_currency(self, price: str, currency: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã —Å –≤–∞–ª—é—Ç–æ–π."""
        currency_map = {
            '‚ÇΩ': '‚ÇΩ', '—Ä—É–±': '‚ÇΩ', '—Ä—É–±.': '‚ÇΩ', '—Ä—É–±–ª–µ–π': '‚ÇΩ', '—Ä—É–±–ª—è': '‚ÇΩ', 'RUB': '‚ÇΩ',
            '$': '$', 'USD': '$', '–¥–æ–ª–ª–∞—Ä': '$', '–¥–æ–ª–ª–∞—Ä–æ–≤': '$',
            '‚Ç¨': '‚Ç¨', 'EUR': '‚Ç¨', '–µ–≤—Ä–æ': '‚Ç¨'
        }
        
        standardized_currency = currency_map.get(currency.lower(), currency)
        return f"{price} {standardized_currency}"

    def parse_time(self, time_str: str) -> Optional[time]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±—ä–µ–∫—Ç datetime.time."""
        try:
            if re.match(r'^\d{2}:\d{2}(:\d{2})?$', time_str):
                if len(time_str) == 5:
                    return datetime.strptime(time_str, '%H:%M').time()
                else:
                    return datetime.strptime(time_str, '%H:%M:%S').time()

            match = self.time_pattern.search(time_str)
            if match:
                hour, minute, am_pm = match.groups()
                hour = int(hour)
                minute = int(minute)

                if am_pm:
                    if am_pm.lower() == 'pm' and hour < 12:
                        hour += 12
                    elif am_pm.lower() == 'am' and hour == 12:
                        hour = 0

                return time(hour, minute)

            return None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤—Ä–µ–º–µ–Ω–∏ {time_str}: {str(e)}")
            return None

    async def extract_booking_data_from_slot_improved(self, slot_element: ElementHandle) -> Dict[str, Any]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ª–æ—Ç–∞.
        """
        try:
            result = {}

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è
            time_str = await self.extract_time_from_element(slot_element)
            if time_str:
                result['time'] = time_str

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
            price = await self.extract_price_from_element_improved(slot_element)
            if price:
                result['price'] = price
            else:
                result['price'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
            provider = await self.extract_provider_from_element_improved(slot_element)
            result['provider'] = provider

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            result['extracted_at'] = datetime.now().isoformat()

            logger.info(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: –≤—Ä–µ–º—è={result.get('time')}, —Ü–µ–Ω–∞={result.get('price')}, –ø—Ä–æ–≤–∞–π–¥–µ—Ä={result.get('provider')}")
            
            return result

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–ª–æ—Ç–∞: {str(e)}")
            return {}
