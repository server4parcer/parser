"""
FIXED Data Extractor - –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∫ —Ü–µ–Ω—ã.
"""
import asyncio
import logging
import re
from datetime import datetime, time, date
from typing import Dict, List, Optional, Any, Tuple, Union

from playwright.async_api import ElementHandle, Page

logger = logging.getLogger(__name__)


class FixedDataExtractor:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∫–ª–∞—Å—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å YClients.
    –û—Å–Ω–æ–≤–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
    1. –ù–ï –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Ä–µ–º—è –∫–∞–∫ —Ü–µ–Ω—É
    2. –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω
    3. –õ—É—á—à–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞ YClients
    4. –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö."""
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ - –°–¢–†–û–ì–û
        self.time_patterns = [
            r'^\d{1,2}:\d{2}$',                    # 22:00, 7:30
            r'^\d{1,2}:\d{2}:\d{2}$',              # 22:00:00
            r'^\d{1,2}\s*:\s*\d{2}$',              # 22 : 00
        ]
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ü–µ–Ω—ã - —Ç–æ–ª—å–∫–æ —Å –≤–∞–ª—é—Ç–æ–π
        self.price_patterns = [
            r'\d+\s*[‚ÇΩ]',                          # 1500‚ÇΩ, 1500 ‚ÇΩ
            r'\d+\s*(?:—Ä—É–±|—Ä—É–±–ª–µ–π?)',              # 1500 —Ä—É–±, 1500 —Ä—É–±–ª–µ–π
            r'\d+\s*(?:\$|USD)',                   # 1500$, 1500 USD
            r'\d+\s*(?:‚Ç¨|EUR)',                    # 1500‚Ç¨, 1500 EUR
        ]
        
        # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –í–†–ï–ú–ï–ù–ò (—á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∞—Ç—å –∏—Ö –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ü–µ–Ω—ã)
        self.time_selectors = [
            '.time', '.slot-time', '.booking-time', '.schedule-time',
            '[data-time]', '.time-value', '.time-display',
            '.hour', '.minute', '.clock', '.duration'
        ]
        
        # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –¶–ï–ù–´ (–∏—Å–∫–ª—é—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã)
        self.price_selectors = [
            '[data-price]:not([data-time]):not(.time)',
            '.price:not(.time):not([data-time])',
            '.cost:not(.time)', '.amount:not(.time)', 
            '.service-price', '.booking-price', '.price-value',
            '.tariff', '.fee', '.rubles', '.currency'
        ]
        
        # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ü–†–û–í–ê–ô–î–ï–†–ê/–°–û–¢–†–£–î–ù–ò–ö–ê
        self.provider_selectors = [
            '[data-staff-name]', '[data-staff]', '[data-specialist]',
            '.staff-name', '.specialist-name', '.master-name',
            '.employee-name', '.provider-name', '.worker-name'
        ]

    async def extract_text_content(self, element: ElementHandle) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞."""
        try:
            text = await element.text_content()
            return text.strip() if text else ""
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
            return ""

    async def extract_attribute(self, element: ElementHandle, attr: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞."""
        try:
            value = await element.get_attribute(attr)
            return value.strip() if value else ""
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—Ç—Ä–∏–±—É—Ç–∞ {attr}: {str(e)}")
            return ""

    def is_definitely_time(self, text: str) -> bool:
        """–°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –≤—Ä–µ–º–µ–Ω–µ–º."""
        if not text:
            return False
        
        text = text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤—Ä–µ–º–µ–Ω–∏
        for pattern in self.time_patterns:
            if re.match(pattern, text):
                return True
        
        return False

    def is_definitely_price(self, text: str) -> bool:
        """–°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Ü–µ–Ω–æ–π."""
        if not text:
            return False
        
        text = text.strip()
        
        # –ï—Å–ª–∏ —ç—Ç–æ –≤—Ä–µ–º—è - —Ç–æ—á–Ω–æ –ù–ï —Ü–µ–Ω–∞
        if self.is_definitely_time(text):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ü–µ–Ω—ã (—Ç–æ–ª—å–∫–æ —Å –≤–∞–ª—é—Ç–æ–π)
        for pattern in self.price_patterns:
            if re.search(pattern, text, re.IGNORECASE):
                return True
        
        return False

    def is_probably_hour_from_time(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –≤–µ—Ä–æ—è—Ç–Ω–æ —á–∞—Å–æ–º –∏–∑ –≤—Ä–µ–º–µ–Ω–∏."""
        if not text:
            return False
        
        text = text.strip()
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 23 - –≤–µ—Ä–æ—è—Ç–Ω–æ —á–∞—Å
        try:
            num = int(text)
            return 0 <= num <= 23
        except ValueError:
            return False

    async def is_element_time_related(self, element: ElementHandle) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–≤—è–∑–∞–Ω –ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å—ã —ç–ª–µ–º–µ–Ω—Ç–∞
            class_name = await element.get_attribute('class') or ""
            if any(time_class in class_name.lower() for time_class in ['time', 'clock', 'hour', 'minute', 'duration']):
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
            if await element.get_attribute('data-time'):
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            parent = await element.query_selector('..')
            if parent:
                parent_class = await parent.get_attribute('class') or ""
                if any(time_class in parent_class.lower() for time_class in ['time', 'clock', 'schedule']):
                    return True
            
            return False
        except Exception:
            return False

    async def extract_price_fixed(self, slot_element: ElementHandle) -> Optional[str]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã - –∏–∑–±–µ–≥–∞–µ–º –≤—Ä–µ–º–µ–Ω–∏ –ª—é–±–æ–π —Ü–µ–Ω–æ–π.
        """
        logger.debug("üîç –ü–æ–∏—Å–∫ —Ü–µ–Ω—ã (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)...")
        
        try:
            # 1. –ò—â–µ–º –≤ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–∞—Ö —Ü–µ–Ω—ã (–∏—Å–∫–ª—é—á–∞—è –≤—Ä–µ–º–µ–Ω–Ω—ã–µ)
            for price_selector in self.price_selectors:
                try:
                    price_elements = await slot_element.query_selector_all(price_selector)
                    for price_element in price_elements:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –ù–ï —Å–≤—è–∑–∞–Ω —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
                        if await self.is_element_time_related(price_element):
                            logger.debug(f"üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç {price_selector} - —Å–≤—è–∑–∞–Ω —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º")
                            continue
                        
                        price_text = await self.extract_text_content(price_element)
                        if price_text and self.is_definitely_price(price_text):
                            cleaned = self.clean_price_strict(price_text)
                            if cleaned:
                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞: {cleaned}")
                                return cleaned
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ {price_selector}: {e}")
                    continue
            
            # 2. –ò—â–µ–º –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï –≤—Ä–µ–º—è)
            price_attrs = ['data-price', 'data-cost', 'data-amount']
            for attr in price_attrs:
                if await slot_element.get_attribute('data-time'):
                    # –ï—Å–ª–∏ –µ—Å—Ç—å data-time, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    continue
                    
                price_value = await self.extract_attribute(slot_element, attr)
                if price_value and self.is_definitely_price(price_value):
                    cleaned = self.clean_price_strict(price_value)
                    if cleaned:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –≤ –∞—Ç—Ä–∏–±—É—Ç–µ {attr}: {cleaned}")
                        return cleaned
            
            # 3. –ò—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ —ç–ª–µ–º–µ–Ω—Ç–∞ (–æ—á–µ–Ω—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ)
            full_text = await self.extract_text_content(slot_element)
            if full_text:
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –∏ –∏—â–µ–º —Ü–µ–Ω—ã —Å –≤–∞–ª—é—Ç–æ–π
                parts = re.split(r'[\s\n\t]+', full_text)
                for part in parts:
                    if part and self.is_definitely_price(part):
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –Ω–µ —á–∞—Å –ª–∏ —ç—Ç–æ
                        if not self.is_probably_hour_from_time(part.replace('‚ÇΩ', '').replace('—Ä—É–±', '').strip()):
                            cleaned = self.clean_price_strict(part)
                            if cleaned:
                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ: {cleaned}")
                                return cleaned
            
            logger.debug("‚ùå –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {str(e)}")
            return None

    def clean_price_strict(self, price_str: str) -> str:
        """–°–¢–†–û–ì–ê–Ø –æ—á–∏—Å—Ç–∫–∞ —Ü–µ–Ω—ã - —Ç–æ–ª—å–∫–æ —Å –≤–∞–ª—é—Ç–æ–π."""
        if not price_str:
            return ""
        
        price_str = price_str.strip()
        
        # –ö–†–ò–¢–ò–ß–ù–û: –ï—Å–ª–∏ —ç—Ç–æ –≤—Ä–µ–º—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        if self.is_definitely_time(price_str):
            logger.warning(f"üö´ –û—Ç–∫–ª–æ–Ω—è–µ–º –≤—Ä–µ–º—è –∫–∞–∫ —Ü–µ–Ω—É: {price_str}")
            return ""
        
        # –ö–†–ò–¢–ò–ß–ù–û: –ï—Å–ª–∏ —ç—Ç–æ –≤–µ—Ä–æ—è—Ç–Ω–æ —á–∞—Å –∏–∑ –≤—Ä–µ–º–µ–Ω–∏ - –æ—Ç–∫–ª–æ–Ω—è–µ–º
        clean_number = re.sub(r'[‚ÇΩ—Ä—É–±$‚Ç¨]', '', price_str).strip()
        if self.is_probably_hour_from_time(clean_number):
            logger.warning(f"üö´ –û—Ç–∫–ª–æ–Ω—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω—ã–π —á–∞—Å: {price_str}")
            return ""
        
        # –ò—â–µ–º —Ü–µ–Ω—É —Å –≤–∞–ª—é—Ç–æ–π
        for pattern in self.price_patterns:
            if re.search(pattern, price_str, re.IGNORECASE):
                return price_str  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å –≤–∞–ª—é—Ç–∞
        
        # –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É –∫ –≥–æ–ª—ã–º —á–∏—Å–ª–∞–º - —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º—è!
        logger.warning(f"üö´ –û—Ç–∫–ª–æ–Ω—è–µ–º —á–∏—Å–ª–æ –±–µ–∑ –≤–∞–ª—é—Ç—ã: {price_str}")
        return ""

    async def extract_provider_fixed(self, slot_element: ElementHandle) -> str:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞."""
        logger.debug("üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞...")
        
        try:
            # 1. –ò—â–µ–º –≤ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–∞—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            for provider_selector in self.provider_selectors:
                try:
                    provider_elements = await slot_element.query_selector_all(provider_selector)
                    for provider_element in provider_elements:
                        provider_text = await self.extract_text_content(provider_element)
                        if provider_text and self.is_valid_name(provider_text):
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_text}")
                            return provider_text.strip()
                except Exception:
                    continue
            
            # 2. –ò—â–µ–º –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
            provider_attrs = ['data-staff-name', 'data-provider', 'data-specialist']
            for attr in provider_attrs:
                provider_value = await self.extract_attribute(slot_element, attr)
                if provider_value and self.is_valid_name(provider_value):
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤ –∞—Ç—Ä–∏–±—É—Ç–µ {attr}: {provider_value}")
                    return provider_value.strip()
            
            # 3. –ò—â–µ–º –∏–º–µ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ (–æ—á–µ–Ω—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ)
            full_text = await self.extract_text_content(slot_element)
            if full_text:
                # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–º–µ–Ω
                name_patterns = [
                    r'\b[–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+\b',  # –†—É—Å—Å–∫–∏–µ –§–ò–û
                    r'\b[A-Z][a-z]+\s+[A-Z][a-z]+\b',       # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –∏–º–µ–Ω–∞
                    r'\b[–ê-–Ø–Å][–∞-—è—ë]{2,}\b'                 # –û–¥–Ω–æ —Ä—É—Å—Å–∫–æ–µ –∏–º—è
                ]
                
                for pattern in name_patterns:
                    matches = re.findall(pattern, full_text)
                    for match in matches:
                        if self.is_valid_name(match):
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤ —Ç–µ–∫—Å—Ç–µ: {match}")
                            return match.strip()
            
            logger.debug("‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return "–ù–µ —É–∫–∞–∑–∞–Ω"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {str(e)}")
            return "–ù–µ —É–∫–∞–∑–∞–Ω"

    def is_valid_name(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏."""
        if not text or len(text.strip()) < 2:
            return False
        
        text = text.strip()
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —á–∏—Å–ª–∞, –≤—Ä–µ–º—è, —Ü–µ–Ω—ã
        if re.search(r'^\d+$', text):
            return False
        if self.is_definitely_time(text):
            return False
        if re.search(r'[‚ÇΩ$‚Ç¨]', text):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ–µ –∏–º—è
        if re.match(r'^[–ê-–Ø–Å–∞-—è—ëA-Za-z\s\-\.]+$', text):
            return True
        
        return False

    async def extract_time_fixed(self, slot_element: ElementHandle) -> Optional[str]:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏."""
        logger.debug("üîç –ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–∏...")
        
        try:
            # 1. –ò—â–µ–º –≤ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–∞—Ö –≤—Ä–µ–º–µ–Ω–∏
            for time_selector in self.time_selectors:
                try:
                    time_element = await slot_element.query_selector(time_selector)
                    if time_element:
                        time_text = await self.extract_text_content(time_element)
                        if time_text and self.is_definitely_time(time_text):
                            parsed_time = self.parse_time_safe(time_text)
                            if parsed_time:
                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º—è: {parsed_time}")
                                return parsed_time
                except Exception:
                    continue
            
            # 2. –ò—â–µ–º –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
            time_attrs = ['data-time', 'time']
            for attr in time_attrs:
                time_str = await self.extract_attribute(slot_element, attr)
                if time_str and self.is_definitely_time(time_str):
                    parsed_time = self.parse_time_safe(time_str)
                    if parsed_time:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º—è –≤ –∞—Ç—Ä–∏–±—É—Ç–µ: {parsed_time}")
                        return parsed_time
            
            # 3. –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ç–µ–∫—Å—Ç–µ
            full_text = await self.extract_text_content(slot_element)
            if full_text:
                for pattern in self.time_patterns:
                    matches = re.findall(pattern, full_text)
                    for match in matches:
                        if self.is_definitely_time(match):
                            parsed_time = self.parse_time_safe(match)
                            if parsed_time:
                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º—è –≤ —Ç–µ–∫—Å—Ç–µ: {parsed_time}")
                                return parsed_time
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {str(e)}")
            return None

    def parse_time_safe(self, time_str: str) -> Optional[str]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏."""
        try:
            if re.match(r'^\d{1,2}:\d{2}$', time_str):
                parsed = datetime.strptime(time_str, '%H:%M').time()
                return parsed.isoformat()
            elif re.match(r'^\d{1,2}:\d{2}:\d{2}$', time_str):
                parsed = datetime.strptime(time_str, '%H:%M:%S').time()
                return parsed.isoformat()
            return None
        except Exception:
            return None

    async def extract_slot_data_fixed(self, slot_element: ElementHandle) -> Dict[str, Any]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–ª–æ—Ç–∞.
        """
        try:
            result = {}

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            time_str = await self.extract_time_fixed(slot_element)
            if time_str:
                result['time'] = time_str

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É (—Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
            price = await self.extract_price_fixed(slot_element)
            result['price'] = price if price else "–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            provider = await self.extract_provider_fixed(slot_element)
            result['provider'] = provider

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            result['extracted_at'] = datetime.now().isoformat()

            logger.info(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ: –≤—Ä–µ–º—è={result.get('time', '–Ω–µ—Ç')}, —Ü–µ–Ω–∞={result.get('price')}, –ø—Ä–æ–≤–∞–π–¥–µ—Ä={result.get('provider')}")
            
            return result

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return {}
